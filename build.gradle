import groovyx.gpars.GParsPool
import net.masterthought.cucumber.ReportBuilder

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'jetty'

buildscript {
    repositories {
        maven {
            url "http://repo.bodar.com"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1",
                "net.masterthought:cucumber-reporting:0.4.0"
    }
}

repositories {
    maven {
        url "http://repo.bodar.com"
    }
    mavenCentral()

}

ext.cukesVersion = '1.2.4'

dependencies {

    compile group: 'net.masterthought', name: 'cucumber-reporting', version: "0.4.0"
    compile group: 'com.googlecode.totallylazy', name: 'totallylazy', version: '1.20'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '2.53.1'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '2.53.1'

    compile group: 'info.cukes', name: 'cucumber-junit', version: "$cukesVersion"
    compile group: 'info.cukes', name: 'cucumber-core', version: "$cukesVersion"
    compile group: 'info.cukes', name: 'cucumber-java8', version: "$cukesVersion"

    compile(
            "org.codehaus.groovy:groovy-all:2.2.0"
    )

    compile files("$buildDir/classes/main")
}

task runInParallel {
    setBrowser()
    doLast {
        def testProperties = "-DsomePropertie=somePropertie"
        runCucumberTests(testProperties, "~@pending")
    }
}

def setBrowser() {
    def collection = fileTree(dir: "${project.projectDir}/src/main/java/com/zliang/properties/").include 'browser.properties*'
    collection.each { File file ->
        file.text = "browser=" + System.getenv('browser')
    }
}


def runCucumberTests(testProperties, tag) {
    def features = fileTree(dir: "${project.projectDir}/src/main/java/com/zliang/features/").include '**/*.feature'

    GParsPool.withPool(10) {
        features.eachParallel { File file ->
            exec {
                executable "sh"
                args "-c", "mkdir -p ${reporting.baseDir}/cucumber" +
                        "&& java ${testProperties} " +
                        "-cp ${sourceSets.main.runtimeClasspath.asPath} " +
                        "cucumber.api.cli.Main " +
                        "--glue classpath:com.zliang " +
                        "${project.projectDir}/src/main/java/com/zliang/features/${file.name} " +
                        "--plugin json:${reporting.baseDir}/cucumber/${file.name}.json " +
                        "--plugin pretty > ${reporting.baseDir}/cucumber/${file.name}.log " +
                        "--tags ${tag}"
            }
            println("${file.name}: Scenario output: ${reporting.baseDir}/cucumber/${file.name}.log ")
        }
    }
    generateReport()
}

task runInSequence() {
    doLast {
        def arglist = ["-p", "pretty", "-p", "json:${reporting.baseDir}/cucumber/cucumber.json", "--glue", "com.zliang",
                       "${project.projectDir}/src/main/java/com/zliang/features"]

        return javaexec {
            main = "cucumber.api.cli.Main"
            classpath = sourceSets.main.runtimeClasspath
            args = arglist
        }
        generateReport()
    }
}

def generateReport() {
    def jsonReports = fileTree(dir: "${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
    File reportOutputDirectory = new File("${reporting.baseDir}/cucumber");

    List<String> jsonReportFiles = new ArrayList<String>();
    jsonReports.each { File file ->
        jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString());
    }
    ReportBuilder reportBuilder = new ReportBuilder(
            jsonReportFiles,              // List<String> jsonReports,
            reportOutputDirectory,        // File reportDirectory
            "",                           // String pluginUrlPath
            "1988",                       // String buildNumber
            "cucumber-gradle-parallel",   // String buildProject,
            false,                        // boolean skippedFails,
            false,                        // boolean pendingFails,
            true,                         // boolean undefinedFails,
            false,                        // boolean missingFails
            false,                        // boolean flashCharts,
            true,                         // boolean runWithJenkins,
            false,                        // boolean artifactsEnabled,
            "",                           // String artifactConfig
            true,                         // boolean highCharts
            true                          // boolean parallelTesting
    );
    reportBuilder.generateReports();
    println("\nReport available on: ${reporting.baseDir}/cucumber/feature-overview.html")
}
